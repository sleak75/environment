
# dummy arg to add to env so bashrc etc dont repeatedly source this
_utils_defined=1

alias	ls='/bin/ls --color'
alias	ll='/bin/ls --color -l'
alias	lt='/bin/ls --color -lt'
alias	pd='pushd'
alias	..='popd'
alias	ssh='ssh -Y'
alias   mls='module list'
alias   mld='module load'
alias   mul='module unload'
#alias   mav='module avail'
alias   msh='module show'
alias	minf='module whatis'
alias	mswp='module swap'
alias	mswap='module swap'
alias sc=screen

alias fix-xauth='rm -f $HOME/.Xauthority && xauth add $DISPLAY -  `mcookie`'

#cat a snippet of a file with line numbers:
lines () {
  cat -n $1 | sed -n ${2},${3}p
}


# tmux: (ctrl-b :kill to kill the current session)
tn () { 
  [[ -z $1 ]] && echo "need a name" && return 1
  grep "^${1} " ~/.tmux-list && echo "name conflict" && return 1
  echo "$1 $(hostname)" >> ~/.tmux-list 
  tmux new -s $1
} 
tf () {
  if [[ -z $1 ]] ; then
    #tmux list-sessions >&2
    cat ~/.tmux-list  2> /dev/null >&2
    return
  fi
  local where=$(grep "^${1} " ~/.tmux-list)
  if [[ -z $where ]] ; then
    echo "can't find session $1" >&2
    return 1
  fi
  local host=${where##* }
  if [[ $host != $(hostname) ]]; then
    ssh $host
  fi
}
ta () {  
  [[ -z $1 ]] && tmux attach || tmux attach -t $1 
}
alias tl='cat ~/.tmux-list'
tk () {
  local s
  [[ -z $1 ]] && s=`tmux display-message -p '#S'` || s=$1
  sed -i "/^${s} /d" ~/.tmux-list && tmux kill-session -t $s || echo "kill failed"
}

#alias tn='tmux new -s '
#alias tl='tmux list-sessions'
#alias ta='tmux attach -t '

# truncate long stdout lines
trunc () { tput rmam ; $* ; tput smam ; }

export SCREENDIR=$HOME/.screen
 
pathadd () {
  if ! echo "$PATH" | /bin/grep -Eq "(^|:)$1($|:)" ; then
    if [[ "$1" == "-a" ]] ; then
      PATH="$PATH:$2"
    elif [[ "$1" == "-p" ]] ; then
      PATH="$2:$PATH"
    else
      PATH="$PATH:$1"
    fi
  fi
}

# for prompt:
dirtag() { if [[ $PWD =~ /global/cscratch ]] ; then echo "CS/" ; elif [[ $PWD =~ /mscratch ]] ; then echo "MS/" ;elif [[ $PWD =~ /pscratch ]] ; then echo "PS/" ; elif [[ $PWD =~ /scratch ]] ; then echo "S/" ; elif [[ $PWD =~ /global/homes ]] ; then echo "H/" ; elif [[ $PWD =~  /project ]] ; then echo "P/" ; elif [[ $PWD =~ /cfs/cdirs ]]; then echo "C/" ; elif [[ $PWD =~ /global/common/software ]]; then echo "GCS/" ; fi ; }

findgrep () {
  regex=$1 ; shift
  filepattern='*'
  [[ $# -gt 0 ]] && { filepattern=$1 ; shift ; }
  find . -type f -name "$filepattern" -exec grep -H $* "$regex" {} \; 
}

now () {
  local n=$(date +%s)
  f=+'%FT%T'
  c=0
  u=1
  while [[ $# -gt 0 ]]; do
    if [[ $1 =~ ^\+ ]]; then
        f="$1"
    elif [[ $1 =~ ^-[0-9]+ ]]; then
        c=${1%%[a-z]*}
        u=${1##*[0-9]}
        case $u in
          d*)   u=$((24*3600)) ;;
          min*) u=60 ;;
          m*)   u=$((3600*24*30)) ;;
          h*)   u=3600 ;;
          w*)   u=$((24*3600*7)) ;;
          *)    echo "unknown unit" ; return 1 ;;
        esac
        n=$((n+c*u))
    elif [[ $1 =~ -d ]]; then
        n=$(date +%s $1 "$2")
        break
    else
        echo "ignoring option $1"
    fi
    shift
  done
  date -d @$n $f "$@"
}

context() {
# save my bash history in different files according to what I'm doing, do make it 
# easier to find stuff and continue working later
  list=$(ls -lt ~/.histories/${2}* 2>/dev/null)
  if [[ -z $1 ]]; then
    [[ -z $CONTEXT ]] && { echo "(default context)"; (echo "$list" | head) } || echo "context: $CONTEXT" 
  elif [[ $1 =~ ^-l ]]; then
    [[ "$1" == "-la" ]] && echo "$list" || (echo "$list" | head)
  else 
    history -a
    { which conda >/dev/null 2>&1; } && conda deactivate 2>/dev/null
    baseprompt=$(echo "$PS1" | sed 's/^\[[-A-Za-z0-9_]\+\] \(.*\)/\1/')
    if [[ $1 =~ ^- ]]; then
      #echo "clearing context"
      unset CONTEXT
      export HISTFILE=~/.bash_history
      PS1="$baseprompt"
    else
      if [[ ! -e ~/.histories/$1 ]]; then
        ls ~/.histories/
        read -e -p "create new? " -i $1
        [[ -z $REPLY ]] && return 1
      else
        REPLY=$1
      fi
      #echo "setting context to $1"
      export CONTEXT=$REPLY
      export HISTFILE=~/.histories/$CONTEXT
      PS1="[$CONTEXT] $baseprompt"
    fi
    history -r
  fi
}

# for sacct:
#alias jobsummary='sacct -a -o JobID%-20,User,Submit,Start,End,State,ExitCode,DerivedExitCode,Elapsed,Timelimit,NNodes,NCPUS,NTasks'
alias mysqueue='squeue -O jobid,arraytaskid,username,account,partition,qos,maxnodes,maxcpus,timelimit,prioritylong,submittime,eligibletime,starttime,reasonlist'

lth () { pattern=$*; unset count; unset d; if [[ -n $* ]] ; then if [[ $1 =~ ^-[0-9]+$ ]] ; then count=$(($1-1)) ; shift ; pattern=$* ; elif [[ ! $1 =~ ^- && ! -d $1 ]]; then d='-d' ; fi ; fi ; ls -lt $d $pattern | head $count ; }
latest () { local count="-1"; local opts=""; if [[ -n $* ]] ; then while [[ $1 =~ ^- ]] ; do if [[ $1 =~ ^-[0-9]+$ ]] ; then count=$1 ; else opts+=" $1" ; fi ; shift ; done ; fi ; /bin/ls -t $opts $* | head $count; }

mav () { module avail $* 2>&1 ; }

myps () {
  local ncores=$(lscpu | awk '/^Thread\(s\) per core/ {tpc=$NF} /^CPU\(s\):/ {cpus=$NF} END {print cpus/tpc}')
#  if [[ -z $1 ]]; then
    local awkscr="NR==1 {print \"core \"\$0; next} ;  { core=int(\$1%$ncores) ; printf(\"%4i %s\n\",core,\$0) | \"sort -sn -k1\"}"
#  else
#    local awkscr="NR==1 {print \"core \"\$0; next} ; \$11 ~ /^${1::8}/ { core=int(\$1%$ncores) ; printf(\"%4i %s\n\",core,\$0) | \"sort -sn -k1\"}"
#  fi
  ps H -o psr,tid,pid,ppid,pgid,nlwp,pcpu,time,rss,size,args --sort=pid,tid $@ | awk "$awkscr"
}  
  
body () { local nh=1; if [[ "$1" =~ -[0-9] ]]; then nh=${1#-} ; shift; fi ; cmd="$*" ; awk 'NR <= '$nh'; NR > '$nh' {print $0 | "'"$cmd"'"}' ; }
table () { local sep=',' ; if [[ $1 =~ ^-s ]]; then sep=${1#-s}; sep=${sep//[\'\"]/} ; if [[ -z $sep ]]; then sep=${2//[\'\"]/} ; fi ; fi ; sed -e "s/$sep/ $sep/g" - | column -t -s$sep ; } 
blockgrep () { local p=$1; shift; local awkcmd='BEGIN { RS="\n\n" ; ORS="\n\n" ; } '"/$p/ {print} ; {next} " ; awk "$awkcmd" $*; }
greplib () { local target=$1 ; shift ; nm $target | grep --label=$target $* ; }
export -f greplib

ssdiff ()
{
    local pager="less -FX";
    if [[ "$1" == "-np" ]]; then
        pager=tee;
        shift;
    fi;
    sdiff -w $((COLUMNS-8)) $* | grep -n -T -C3 -e '[[:space:]][|<>][[:space:]]' -e '[[:space:]][|<>]$' | sed 's/./ /7' | $pager
}

function termname () { PROMPT_COMMAND='echo -ne "\033]0;'"$*"'\007"' ; }

# names of modules I have currently loaded
loaded () { module list 2>&1 | awk 'NR>1 {print $2}' ; }
#stash () { _stash=$(loaded) ; }
#unstash () { [[ -n "$_stash" ]] && module load $_stash ; }

function showq2 () 
{ 
  #local schedparams=$(scontrol show config | grep '^SchedulerParameters')
  #local bf_min_prio_reserve=$(sed 's/.*bf_min_prio_reserve=\([^,]*\),.*/\1/' <<< "$schedparams")  # min priority scheduler considers
  #local bf_window=$(sed 's/.*bf_window=\([^,]*\),.*/\1/' <<< "$schedparams")                      # if cant schedule within this many mins, give up
  local fmt='%.18i %.4t %.8u %.8a %.16P %.18q %.6D %.6C %.10l %.10L %.10Q %.20V %.20S %.12r %e'
  local ready='-e Priority -e Resources' 
  local pending=$(SLURM_TIME_FORMAT='%s' squeue -r -t PD -o "$fmt" | awk 'NR > 1 {print $0 | "sort -rsn -k11"}')
  local pd=$(grep $ready <<< "$pending" ; grep -v $ready <<< "$pending") 
  local wholeq=$(SLURM_TIME_FORMAT='%s' squeue -r -t R  -o "$fmt" | awk 'NR == 1 { print "  Q_pos " $0 }  NR > 1 {print "     0  " $0 | "sort -rsn -k13"}' ; nl <<<"$pd" )
  if [[ $# -gt 0 ]]; then 
    local search="" 
    for t in $* ; do 
      search+=" -e $t" 
    done
    body grep $search <<< "$wholeq" | less -FX
  else 
    less -FX <<< "$wholeq" 
  fi
}

function sec_to_hms ()
{
        local retstr
        if [[ $1 =~ ^(-?)([0-9]+)$ ]]; then
                # convert seconds to H:MM:SS
                local h=$((${1}/3600))
                local rem=$((${1} - (h*3600)))
                local m=$((rem/60))
                rem=$((rem - (m*60)))
                if [[ $h -gt 0 ]]; then
                        printf -v retstr "%d:%02d:%02d" "$h" "$m" "$rem"
                else
                        printf -v retstr "%02d:%02d" "$m" "$rem"
                fi
        elif [[ $1 =~ ^(-?)([0-9:]+)$ ]]; then
                retstr=$1
        else
                return 1
        fi
        printf "%s\n" "$retstr"
        return 0
}

# cori-specific
function mreset () {
module purge
module load modules
module load nsg
module load intel
module load craype
module load PrgEnv-cray
module swap PrgEnv-cray PrgEnv-intel
case "$NERSC_HOST" in
  cori) module load craype-haswell ;;
  edison) module load craype-ivybridge ;
          export CRAY_CPU_TARGET=sandybridge ;;
esac
module load cray-mpich
module load altd
module load darshan
}

function walk () {
    # read lines from a file, give user the chance to edit each
    # and then execute it:
    _verbose=0
    if [[ "$1" == "-v" ]] ; then
      _verbose=1
      shift
    fi

    while IFS='' read -r line || [[ -n "$line" ]]; do
        # skip blank lines
        [[ -z "$line" ]] && continue
        _m='^\s*#'
        if [[ "$line" =~ $_m ]] ; then
            echo -e "$line"
            continue
        fi
        # do variable expansion so it is explicit what will be run
        # (to avoid "forgot to set the variable, overwrote the wrong thing"
        # type errors):
        expline=$(envsubst <<< "$line")
        # 'read' seems to clear escape characters, so replace each with
        # two (to escape the escape char):
        escapes=$(sed -e 's/\\/\\\\/g' <<< "$expline")

        fail=1
        while (( $fail )) ; do
            # give the user a chance to edit (or delete) the command:
            read -i "$escapes" -e cmd < /dev/tty
            # print what will actually get run:
            (( $_verbose )) && echo -e "$cmd"
            # run what remains:
            eval $cmd
            fail=$?
            (( $fail )) && echo "failed - try again?"
        done
    done < "$1"
}
